
module concurrent;

import java.util.*;
import java.io.*;
import concurrent.Graph;
import concurrent.FileParser;
 
/*
   This behavior simply prints out a string,
   reads a line from the Standard Input,
   combines the return value of the Standard Input with other strings,
   and then prints out the combined string.

   commands to compile and run

   java -cp salsa1.1.6.jar:. salsac.SalsaCompiler concurrent/*.salsa

   javac -classpath salsa1.1.6.jar:. concurrent/*.java

   java -cp salsa1.1.6.jar:. concurrent.GraphStats

*/
behavior GraphStats{

   public GraphStats() {}

   String mergeString(String str1, String str2, String str3) {
       return str1+str2+str3;
    }

   void act(String[] args) {
      int argc = args.length;
      if (argc == 3) 
      {
        FileParser fileparser = new FileParser(args[0]);
        Graph testGraph = fileparser.createGraph();
        Graph part1 = testGraph.getPartitionGraph(0);
        Partition p = new Partition(part1);
        p <- getTotalNodesInColors();
        p <- getNodesInColors("green") @ standardOutput <- println(token);

        p <- mostInfluentialInPartition();
      }
      else
      {
         standardOutput<-println("Wrong number of args");
        //standardOutput<-println("What's your name?")@
        //standardInput<-readLine()@
        //self<-mergeString("Hi, ",token, ". Nice to meet you!" )@
        //standardOutput<-println(token);
      }
   }




      void partb() {


      // for each actor

    //   actor 




      // create an array of actors
      // have them talk to each other
      // Sample output
      // partition 0: 0,1,4,9
      // partition 1: 1,4,5,8
      // partition 2: 0,5,8,9
      // G: 0,1,4,5,8,9

      // for each partition, list most influential node
      // for total graoh list most influential nodes

      // graph is just all of most influential from sets put together


      // For each partition 

         // 1.) get degree of each internal node
         
         // 2.) get list of external nodes connected to partition

            // 3.) For each external node, messages actors to get degree of iterator
         
      // 4.) find largest degree nodes for each partiton by checking degree of all intern and external nodes
      
      // 5.) return largest degree node(s) for each parittion and total graph, if tied return all of highest degree



   }
}